     1                                  ;Hayden Amazon
     2                                  ;p10
     3                                  ;12/13/23
     4                                  ;Etc............
     5                                  
     6                                  
     7                                  %macro Open 1
     8                                  	;;;;
     9                                          pusha
    10                                          mov     eax,5
    11                                          mov     ebx,fileName
    12                                          mov     ecx,%1
    13                                          int     80h
    14                                          mov     [fileDescriptor],eax
    15                                          popa
    16                                  	;;;;
    17                                  %endmacro
    18                                  
    19                                  %macro Read 3
    20                                          pusha
    21                                          mov     eax,3 ;sys read
    22                                          mov     ebx,[%1]
    23                                          mov     ecx,%2
    24                                          mov     edx,%3
    25                                          int     80h
    26                                          popa
    27                                  %endmacro
    28                                  
    29                                  %macro Write 3
    30                                          pusha
    31                                          mov     eax,4
    32                                          mov     ebx,[%1]
    33                                          mov     ecx,%2
    34                                          mov     edx,%3
    35                                  	;3 parameters in write macro
    36                                          int     80h
    37                                          popa
    38                                  %endmacro
    39                                  
    40                                  %macro Close 0
    41                                          pusha
    42                                          mov     eax,6
    43                                          mov     ebx,[fileDescriptor]
    44                                          int     80h
    45                                          popa
    46                                  %endmacro
    47                                  
    48                                  %macro NormalTermination 0
    49                                          mov eax, 1
    50                                          mov ebx, 0
    51                                          int 80h
    52                                  %endmacro
    53                                  
    54                                  %macro clearScreen 0
    55                                          pusha
    56                                          mov eax, 4
    57                                          mov ebx, 1
    58                                          mov ecx, cls
    59                                          mov edx, [clsLen]
    60                                          int 80h
    61                                          popa
    62                                  %endmacro
    63                                  
    64                                  %macro prt 2
    65                                          pusha
    66                                          mov ecx, %1
    67                                          mov edx, %2
    68                                          mov eax, 4
    69                                          mov ebx, 1
    70                                          int 80h
    71                                          popa
    72                                  %endmacro
    73                                  
    74                                  %macro convert 0
    75                                          push ebx
    76                                          push ecx
    77                                          xor ebx, ebx
    78                                          xor ecx, ecx
    79                                          mov bx, '00'
    80                                          xchg ah, al
    81                                          sub ax, bx
    82                                          mov ch, ah
    83                                          shl ah, 3
    84                                          shl ch, 1
    85                                          add ah, ch
    86                                          add al, ah
    87                                          xor ah,ah
    88                                          pop ecx
    89                                          pop ebx
    90                                  %endmacro
    91                                  
    92                                  %macro convert_back 0
    93                                          push ebx
    94                                          push ecx        
    95                                  
    96                                          mov bl, 10
    97                                          div bl
    98                                          add ah, 48
    99                                          add al, 48
   100                                  
   101                                          pop ecx
   102                                          pop ebx
   103                                  %endmacro 
   104                                  
   105                                  SECTION .data
   106                                  ; define data/variables here.  Think DB, DW, DD, DQ
   107                                  
   108 00000000 00000000                stdin   dd      0
   109 00000004 01000000                stdout  dd      1
   110 00000008 0100000000000000        sec:    dd 1,0
   111 00000010 2E2F66696C652E7478-     fileName:       db      './file.txt',0
   112 00000019 7400               
   113 0000001B 00000000                fileDescriptor: dd      0
   114                                  
   115 0000001F 1B5B30323B34304840      python: db      1bh,'[02;40H@'
   116 00000028 1B5B30323B3431482A              db      1bh,'[02;41H*'
   117 00000031 1B5B30323B3432482A              db      1bh,'[02;42H*'
   118 0000003A 1B5B30323B3433482A              db      1bh,'[02;43H*'
   119 00000043 1B5B30323B3434482A              db      1bh,'[02;44H*'
   120 0000004C 1B5B30323B3435482A              db      1bh,'[02;45H*'
   121 00000055 1B5B30323B3436482B              db      1bh,'[02;46H+'
   122 0000005E 1B5B30323B34374820              db      1bh,'[02;47H '
   123                                  pythonSize:  EQU  $-python
   124 00000067 0900                    segmentSize : dw 9
   125                                  
   126 00000069 2A2A2A2A2A2A2A2A2A-     screen: db      "********************************************************************************",0ah
   127 00000072 2A2A2A2A2A2A2A2A2A-
   128 0000007B 2A2A2A2A2A2A2A2A2A-
   129 00000084 2A2A2A2A2A2A2A2A2A-
   130 0000008D 2A2A2A2A2A2A2A2A2A-
   131 00000096 2A2A2A2A2A2A2A2A2A-
   132 0000009F 2A2A2A2A2A2A2A2A2A-
   133 000000A8 2A2A2A2A2A2A2A2A2A-
   134 000000B1 2A2A2A2A2A2A2A2A0A 
   135 000000BA 2A2020202020202020-             db      "*                          *                           *                       *",0ah
   136 000000C3 202020202020202020-
   137 000000CC 202020202020202020-
   138 000000D5 2A2020202020202020-
   139 000000DE 202020202020202020-
   140 000000E7 202020202020202020-
   141 000000F0 202A20202020202020-
   142 000000F9 202020202020202020-
   143 00000102 202020202020202A0A 
   144 0000010B 2A2020202020202A2A-             db      "*      *************       *        *************      *       *********       *",0ah
   145 00000114 2A2A2A2A2A2A2A2A2A-
   146 0000011D 2A2A20202020202020-
   147 00000126 2A2020202020202020-
   148 0000012F 2A2A2A2A2A2A2A2A2A-
   149 00000138 2A2A2A2A2020202020-
   150 00000141 202A20202020202020-
   151 0000014A 2A2A2A2A2A2A2A2A2A-
   152 00000153 202020202020202A0A 
   153 0000015C 2A2020202020202020-             db      "*                          *                           *                       *",0ah
   154 00000165 202020202020202020-
   155 0000016E 202020202020202020-
   156 00000177 2A2020202020202020-
   157 00000180 202020202020202020-
   158 00000189 202020202020202020-
   159 00000192 202A20202020202020-
   160 0000019B 202020202020202020-
   161 000001A4 202020202020202A0A 
   162 000001AD 2A2020202020202020-             db      "*                          *                           *                       *",0ah
   163 000001B6 202020202020202020-
   164 000001BF 202020202020202020-
   165 000001C8 2A2020202020202020-
   166 000001D1 202020202020202020-
   167 000001DA 202020202020202020-
   168 000001E3 202A20202020202020-
   169 000001EC 202020202020202020-
   170 000001F5 202020202020202A0A 
   171 000001FE 2A2020202020202020-             db      "*                          *                           *                       *",0ah
   172 00000207 202020202020202020-
   173 00000210 202020202020202020-
   174 00000219 2A2020202020202020-
   175 00000222 202020202020202020-
   176 0000022B 202020202020202020-
   177 00000234 202A20202020202020-
   178 0000023D 202020202020202020-
   179 00000246 202020202020202A0A 
   180 0000024F 2A2020202020202020-             db      "*                                                                              *",0ah
   181 00000258 202020202020202020-
   182 00000261 202020202020202020-
   183 0000026A 202020202020202020-
   184 00000273 202020202020202020-
   185 0000027C 202020202020202020-
   186 00000285 202020202020202020-
   187 0000028E 202020202020202020-
   188 00000297 202020202020202A0A 
   189 000002A0 2A2020202020202020-             db      "*           **************************        ***********************          *",0ah
   190 000002A9 2020202A2A2A2A2A2A-
   191 000002B2 2A2A2A2A2A2A2A2A2A-
   192 000002BB 2A2A2A2A2A2A2A2A2A-
   193 000002C4 2A2A20202020202020-
   194 000002CD 202A2A2A2A2A2A2A2A-
   195 000002D6 2A2A2A2A2A2A2A2A2A-
   196 000002DF 2A2A2A2A2A2A202020-
   197 000002E8 202020202020202A0A 
   198 000002F1 2A2020202020202020-             db      "*                                *               *                             *",0ah
   199 000002FA 202020202020202020-
   200 00000303 202020202020202020-
   201 0000030C 2020202020202A2020-
   202 00000315 202020202020202020-
   203 0000031E 202020202A20202020-
   204 00000327 202020202020202020-
   205 00000330 202020202020202020-
   206 00000339 202020202020202A0A 
   207 00000342 2A2020202020202020-             db      "*                                *     ***********                             *",0ah
   208 0000034B 202020202020202020-
   209 00000354 202020202020202020-
   210 0000035D 2020202020202A2020-
   211 00000366 2020202A2A2A2A2A2A-
   212 0000036F 2A2A2A2A2A20202020-
   213 00000378 202020202020202020-
   214 00000381 202020202020202020-
   215 0000038A 202020202020202A0A 
   216 00000393 2A2020202020202020-             db      "*                          *     *               *     *                       *",0ah
   217 0000039C 202020202020202020-
   218 000003A5 202020202020202020-
   219 000003AE 2A20202020202A2020-
   220 000003B7 202020202020202020-
   221 000003C0 202020202A20202020-
   222 000003C9 202A20202020202020-
   223 000003D2 202020202020202020-
   224 000003DB 202020202020202A0A 
   225 000003E4 2A2020202020202020-             db      "*                          *     **********      *     *                       *",0ah
   226 000003ED 202020202020202020-
   227 000003F6 202020202020202020-
   228 000003FF 2A20202020202A2A2A-
   229 00000408 2A2A2A2A2A2A2A2020-
   230 00000411 202020202A20202020-
   231 0000041A 202A20202020202020-
   232 00000423 202020202020202020-
   233 0000042C 202020202020202A0A 
   234 00000435 2A2020202020202020-             db      "*                          *     *               *     *                       *",0ah
   235 0000043E 202020202020202020-
   236 00000447 202020202020202020-
   237 00000450 2A20202020202A2020-
   238 00000459 202020202020202020-
   239 00000462 202020202A20202020-
   240 0000046B 202A20202020202020-
   241 00000474 202020202020202020-
   242 0000047D 202020202020202A0A 
   243 00000486 2A2020202020202020-             db      "*                          *     *      **********     *                       *",0ah
   244 0000048F 202020202020202020-
   245 00000498 202020202020202020-
   246 000004A1 2A20202020202A2020-
   247 000004AA 202020202A2A2A2A2A-
   248 000004B3 2A2A2A2A2A20202020-
   249 000004BC 202A20202020202020-
   250 000004C5 202020202020202020-
   251 000004CE 202020202020202A0A 
   252 000004D7 2A2020202020202020-             db      "*                          *                           *                       *",0ah
   253 000004E0 202020202020202020-
   254 000004E9 202020202020202020-
   255 000004F2 2A2020202020202020-
   256 000004FB 202020202020202020-
   257 00000504 202020202020202020-
   258 0000050D 202A20202020202020-
   259 00000516 202020202020202020-
   260 0000051F 202020202020202A0A 
   261 00000528 2A2020202020202020-             db      "*                                                                              *",0ah
   262 00000531 202020202020202020-
   263 0000053A 202020202020202020-
   264 00000543 202020202020202020-
   265 0000054C 202020202020202020-
   266 00000555 202020202020202020-
   267 0000055E 202020202020202020-
   268 00000567 202020202020202020-
   269 00000570 202020202020202A0A 
   270 00000579 2A2020202020202020-             db      "*           ***   ***   ***   ***   ***   ***   ***   ***   ***   ***          *",0ah
   271 00000582 2020202A2A2A202020-
   272 0000058B 2A2A2A2020202A2A2A-
   273 00000594 2020202A2A2A202020-
   274 0000059D 2A2A2A2020202A2A2A-
   275 000005A6 2020202A2A2A202020-
   276 000005AF 2A2A2A2020202A2A2A-
   277 000005B8 2020202A2A2A202020-
   278 000005C1 202020202020202A0A 
   279 000005CA 2A2020202020202020-             db      "*                                                                              *",0ah
   280 000005D3 202020202020202020-
   281 000005DC 202020202020202020-
   282 000005E5 202020202020202020-
   283 000005EE 202020202020202020-
   284 000005F7 202020202020202020-
   285 00000600 202020202020202020-
   286 00000609 202020202020202020-
   287 00000612 202020202020202A0A 
   288 0000061B 2A2020202020202020-             db      "*            *     *     *     *     *     *     *     *     *     *           *",0ah
   289 00000624 202020202A20202020-
   290 0000062D 202A20202020202A20-
   291 00000636 202020202A20202020-
   292 0000063F 202A20202020202A20-
   293 00000648 202020202A20202020-
   294 00000651 202A20202020202A20-
   295 0000065A 202020202A20202020-
   296 00000663 202020202020202A0A 
   297 0000066C 2A2020202020202020-             db      "*               *     *     *     *     *     *     *     *     *              *",0ah
   298 00000675 202020202020202A20-
   299 0000067E 202020202A20202020-
   300 00000687 202A20202020202A20-
   301 00000690 202020202A20202020-
   302 00000699 202A20202020202A20-
   303 000006A2 202020202A20202020-
   304 000006AB 202A20202020202020-
   305 000006B4 202020202020202A0A 
   306 000006BD 2A2020202020202020-             db      "*            *     *     *     *     *  W  *     *     *     *     *           *",0ah
   307 000006C6 202020202A20202020-
   308 000006CF 202A20202020202A20-
   309 000006D8 202020202A20202020-
   310 000006E1 202A20205720202A20-
   311 000006EA 202020202A20202020-
   312 000006F3 202A20202020202A20-
   313 000006FC 202020202A20202020-
   314 00000705 202020202020202A0A 
   315 0000070E 2A2020202020202020-             db      "*               *     *     *     *     *     *     *     *     *              *",0ah
   316 00000717 202020202020202A20-
   317 00000720 202020202A20202020-
   318 00000729 202A20202020202A20-
   319 00000732 202020202A20202020-
   320 0000073B 202A20202020202A20-
   321 00000744 202020202A20202020-
   322 0000074D 202A20202020202020-
   323 00000756 202020202020202A0A 
   324 0000075F 2A2020202020202020-             db      "*            *     *     *     *     *     *     *     *     *     *           *",0ah
   325 00000768 202020202A20202020-
   326 00000771 202A20202020202A20-
   327 0000077A 202020202A20202020-
   328 00000783 202A20202020202A20-
   329 0000078C 202020202A20202020-
   330 00000795 202A20202020202A20-
   331 0000079E 202020202A20202020-
   332 000007A7 202020202020202A0A 
   333 000007B0 2A2020202020202020-             db      "*               *     *     *     *     *     *     *     *     *              *",0ah
   334 000007B9 202020202020202A20-
   335 000007C2 202020202A20202020-
   336 000007CB 202A20202020202A20-
   337 000007D4 202020202A20202020-
   338 000007DD 202A20202020202A20-
   339 000007E6 202020202A20202020-
   340 000007EF 202A20202020202020-
   341 000007F8 202020202020202A0A 
   342 00000801 2A2A2A2A2A2A2A2A2A-             db      "********************************************************************************",0ah
   343 0000080A 2A2A2A2A2A2A2A2A2A-
   344 00000813 2A2A2A2A2A2A2A2A2A-
   345 0000081C 2A2A2A2A2A2A2A2A2A-
   346 00000825 2A2A2A2A2A2A2A2A2A-
   347 0000082E 2A2A2A2A2A2A2A2A2A-
   348 00000837 2A2A2A2A2A2A2A2A2A-
   349 00000840 2A2A2A2A2A2A2A2A2A-
   350 00000849 2A2A2A2A2A2A2A2A0A 
   351                                  screenSize:     EQU $-screen
   352                                  
   353 00000852 0100                    col: dw 1
   354 00000854 0100                    row: dw 1
   355 00000856 0000                    segmen: dw 0
   356 00000858 0000                    termination: dw 0
   357 0000085A 2A2020472041204D20-     gameOver: db    "*  G A M E         O V E R  *", 0ah          
   358 00000863 452020202020202020-
   359 0000086C 204F20562045205220-
   360 00000875 202A0A             
   361                                  gameOverSize: EQU $-gameOver
   362                                  
   363                                  ;Winning screen
   364 00000878 2A202059204F205520-     gameWin:  db    "*  Y O U      W I N!  *", 0ah
   365 00000881 202020202057204920-
   366 0000088A 4E2120202A0A       
   367                                  gameWinSize: EQU $-gameWin
   368                                  
   369                                  ;Clear screen
   370 00000890 1B5B324A                cls     db     1bh, '[2J'
   371 00000894 04000000                clsLen  dd $-cls
   372                                  
   373                                  ;Cursor position
   374 00000898 1B5B                    pos1    db      1bh, '['
   375 0000089A 3030                            db      '00'
   376 0000089C 3B                              db      ';'
   377 0000089D 3030                            db      '00'
   378 0000089F 48                              db      'H'
   379                                  
   380                                  SECTION .bss
   381                                  ; define uninitialized data here
   382                                  
   383                                  LEN     equ     1024
   384 00000000 <res 00000400>          inputBuffer     RESB LEN
   385 00000400 <res 00000004>          childPID        RESD 1
   386                                  
   387                                  SECTION .text
   388                                  global _main, _sleep1
   389                                  _main:
   390                                  
   391                                          lastBreak:
   392                                          
   393 00000000 31DB                            xor ebx, ebx
   394 00000002 31C0                            xor eax, eax
   395 00000004 B802000000                      mov     eax,2
   396 00000009 CD80                            int     80h
   397                                  
   398 0000000B 83F800                          cmp     eax,0
   399 0000000E 0F84A4000000                    je      childProc
   400 00000014 A3[00040000]                    mov     [childPID],eax
   401                                  parent:
   402                                  	;parent
   403 00000019 66833D[58080000]01              cmp word [termination], 1
   404 00000021 0F8440010000                    je lossscreen
   405 00000027 66833D[58080000]02              cmp word [termination], 2
   406 0000002F 0F84FC000000                    je winscreen
   407                                  
   408                                          clearScreen
   409 00000035 60                  <1>  pusha
   410 00000036 B804000000          <1>  mov eax, 4
   411 0000003B BB01000000          <1>  mov ebx, 1
   412 00000040 B9[90080000]        <1>  mov ecx, cls
   413 00000045 8B15[94080000]      <1>  mov edx, [clsLen]
   414 0000004B CD80                <1>  int 80h
   415 0000004D 61                  <1>  popa
   416 0000004E E8D0020000                      call writeToScreen
   417 00000053 E865020000                      call    _getCode
   418                                          Write stdout, inputBuffer, 1
   419 00000058 60                  <1>  pusha
   420 00000059 B804000000          <1>  mov eax,4
   421 0000005E 8B1D[04000000]      <1>  mov ebx,[%1]
   422 00000064 B9[00000000]        <1>  mov ecx,%2
   423 00000069 BA01000000          <1>  mov edx,%3
   424                              <1> 
   425 0000006E CD80                <1>  int 80h
   426 00000070 61                  <1>  popa
   427 00000071 3C77                            cmp     al,'w'
   428 00000073 0F84B4010000                    je moveUp
   429                                  
   430 00000079 3C61                            cmp     al,'a'
   431 0000007B 0F841C010000                    je moveLeft
   432                                  
   433 00000081 3C73                            cmp     al,'s'
   434 00000083 0F84EC010000                    je moveDown
   435                                  
   436 00000089 3C64                            cmp     al,'d'
   437 0000008B 0F8454010000                    je moveRight
   438                                  
   439 00000091 3C71                            cmp     al,'q'
   440 00000093 747E                            je      ENDgame
   441                                          
   442                                          clearScreen
   443 00000095 60                  <1>  pusha
   444 00000096 B804000000          <1>  mov eax, 4
   445 0000009B BB01000000          <1>  mov ebx, 1
   446 000000A0 B9[90080000]        <1>  mov ecx, cls
   447 000000A5 8B15[94080000]      <1>  mov edx, [clsLen]
   448 000000AB CD80                <1>  int 80h
   449 000000AD 61                  <1>  popa
   450                                          ; sleep one second
   451                                  time2sleep:
   452 000000AE E850020000                      call _sleep1
   453 000000B3 E961FFFFFF                      jmp parent
   454                                  
   455                                  childProc:
   456                                  	;child
   457                                          Read stdin, inputBuffer, LEN
   458 000000B8 60                  <1>  pusha
   459 000000B9 B803000000          <1>  mov eax,3
   460 000000BE 8B1D[00000000]      <1>  mov ebx,[%1]
   461 000000C4 B9[00000000]        <1>  mov ecx,%2
   462 000000C9 BA00040000          <1>  mov edx,%3
   463 000000CE CD80                <1>  int 80h
   464 000000D0 61                  <1>  popa
   465                                  
   466                                          ;; Open a file for communication
   467                                          Open 101h  ; for writing
   468                              <1> 
   469 000000D1 60                  <1>  pusha
   470 000000D2 B805000000          <1>  mov eax,5
   471 000000D7 BB[10000000]        <1>  mov ebx,fileName
   472 000000DC B901010000          <1>  mov ecx,%1
   473 000000E1 CD80                <1>  int 80h
   474 000000E3 A3[1B000000]        <1>  mov [fileDescriptor],eax
   475 000000E8 61                  <1>  popa
   476                              <1> 
   477                                  
   478                                          ;write to txt file
   479                                          Write fileDescriptor, inputBuffer, 1
   480 000000E9 60                  <1>  pusha
   481 000000EA B804000000          <1>  mov eax,4
   482 000000EF 8B1D[1B000000]      <1>  mov ebx,[%1]
   483 000000F5 B9[00000000]        <1>  mov ecx,%2
   484 000000FA BA01000000          <1>  mov edx,%3
   485                              <1> 
   486 000000FF CD80                <1>  int 80h
   487 00000101 61                  <1>  popa
   488                                  
   489                                          ;;;  close the file
   490                                          Close
   491 00000102 60                  <1>  pusha
   492 00000103 B806000000          <1>  mov eax,6
   493 00000108 8B1D[1B000000]      <1>  mov ebx,[fileDescriptor]
   494 0000010E CD80                <1>  int 80h
   495 00000110 61                  <1>  popa
   496                                  
   497 00000111 EBA5                            jmp childProc
   498                                  
   499                                  ; Normal termination code
   500                                  ENDgame:
   501 00000113 B825000000                      mov     eax,37
   502 00000118 8B1D[00040000]                  mov     ebx,[childPID]
   503 0000011E B909000000                      mov     ecx,9  ; kill signal
   504 00000123 CD80                            int     80h
   505                                          NormalTermination
   506 00000125 B801000000          <1>  mov eax, 1
   507 0000012A BB00000000          <1>  mov ebx, 0
   508 0000012F CD80                <1>  int 80h
   509                                  
   510                                  winscreen:
   511 00000131 B825000000                      mov     eax,37
   512 00000136 8B1D[00040000]                  mov     ebx,[childPID]
   513 0000013C B909000000                      mov     ecx,9  ; kill signal
   514 00000141 CD80                            int     80h
   515                                          prt gameWin, gameWinSize
   516 00000143 60                  <1>  pusha
   517 00000144 B9[78080000]        <1>  mov ecx, %1
   518 00000149 BA18000000          <1>  mov edx, %2
   519 0000014E B804000000          <1>  mov eax, 4
   520 00000153 BB01000000          <1>  mov ebx, 1
   521 00000158 CD80                <1>  int 80h
   522 0000015A 61                  <1>  popa
   523                                          NormalTermination
   524 0000015B B801000000          <1>  mov eax, 1
   525 00000160 BB00000000          <1>  mov ebx, 0
   526 00000165 CD80                <1>  int 80h
   527                                  lossscreen:
   528 00000167 B825000000                      mov     eax,37
   529 0000016C 8B1D[00040000]                  mov     ebx,[childPID]
   530 00000172 B909000000                      mov     ecx,9  ; kill signal
   531 00000177 CD80                            int     80h
   532                                          prt gameOver, gameOverSize
   533 00000179 60                  <1>  pusha
   534 0000017A B9[5A080000]        <1>  mov ecx, %1
   535 0000017F BA1E000000          <1>  mov edx, %2
   536 00000184 B804000000          <1>  mov eax, 4
   537 00000189 BB01000000          <1>  mov ebx, 1
   538 0000018E CD80                <1>  int 80h
   539 00000190 61                  <1>  popa
   540                                          NormalTermination
   541 00000191 B801000000          <1>  mov eax, 1
   542 00000196 BB00000000          <1>  mov ebx, 0
   543 0000019B CD80                <1>  int 80h
   544                                  
   545                                  
   546                                  moveLeft:       
   547                                  	;left movement
   548 0000019D 66A1[24000000]                  mov ax, [python + 5]
   549                                          convert
   550 000001A3 53                  <1>  push ebx
   551 000001A4 51                  <1>  push ecx
   552 000001A5 31DB                <1>  xor ebx, ebx
   553 000001A7 31C9                <1>  xor ecx, ecx
   554 000001A9 66BB3030            <1>  mov bx, '00'
   555 000001AD 86E0                <1>  xchg ah, al
   556 000001AF 6629D8              <1>  sub ax, bx
   557 000001B2 88E5                <1>  mov ch, ah
   558 000001B4 C0E403              <1>  shl ah, 3
   559 000001B7 D0E5                <1>  shl ch, 1
   560 000001B9 00EC                <1>  add ah, ch
   561 000001BB 00E0                <1>  add al, ah
   562 000001BD 30E4                <1>  xor ah,ah
   563 000001BF 59                  <1>  pop ecx
   564 000001C0 5B                  <1>  pop ebx
   565 000001C1 66BB0100                        mov bx, 1
   566 000001C5 6629D8                          sub ax, bx
   567                                          convert_back
   568 000001C8 53                  <1>  push ebx
   569 000001C9 51                  <1>  push ecx
   570                              <1> 
   571 000001CA B30A                <1>  mov bl, 10
   572 000001CC F6F3                <1>  div bl
   573 000001CE 80C430              <1>  add ah, 48
   574 000001D1 0430                <1>  add al, 48
   575                              <1> 
   576 000001D3 59                  <1>  pop ecx
   577 000001D4 5B                  <1>  pop ebx
   578 000001D5 E869020000                      call pyshift
   579 000001DA 66A3[24000000]                  mov [python + 5], ax
   580                                  
   581 000001E0 E9C9FEFFFF                      jmp time2sleep
   582                                  
   583                                  moveRight:            
   584                                  	;right movement        
   585 000001E5 66A1[24000000]                  mov ax, [python + 5]
   586                                          convert
   587 000001EB 53                  <1>  push ebx
   588 000001EC 51                  <1>  push ecx
   589 000001ED 31DB                <1>  xor ebx, ebx
   590 000001EF 31C9                <1>  xor ecx, ecx
   591 000001F1 66BB3030            <1>  mov bx, '00'
   592 000001F5 86E0                <1>  xchg ah, al
   593 000001F7 6629D8              <1>  sub ax, bx
   594 000001FA 88E5                <1>  mov ch, ah
   595 000001FC C0E403              <1>  shl ah, 3
   596 000001FF D0E5                <1>  shl ch, 1
   597 00000201 00EC                <1>  add ah, ch
   598 00000203 00E0                <1>  add al, ah
   599 00000205 30E4                <1>  xor ah,ah
   600 00000207 59                  <1>  pop ecx
   601 00000208 5B                  <1>  pop ebx
   602 00000209 66BB0100                        mov bx, 1
   603 0000020D 6601D8                          add ax, bx
   604                                          convert_back
   605 00000210 53                  <1>  push ebx
   606 00000211 51                  <1>  push ecx
   607                              <1> 
   608 00000212 B30A                <1>  mov bl, 10
   609 00000214 F6F3                <1>  div bl
   610 00000216 80C430              <1>  add ah, 48
   611 00000219 0430                <1>  add al, 48
   612                              <1> 
   613 0000021B 59                  <1>  pop ecx
   614 0000021C 5B                  <1>  pop ebx
   615 0000021D E821020000                      call pyshift
   616 00000222 66A3[24000000]                  mov [python + 5], ax
   617                                  
   618 00000228 E981FEFFFF                      jmp time2sleep
   619                                  
   620                                  moveUp:                 
   621                                  	;up movement
   622 0000022D 66A1[21000000]                  mov ax, [python + 2]
   623                                          convert
   624 00000233 53                  <1>  push ebx
   625 00000234 51                  <1>  push ecx
   626 00000235 31DB                <1>  xor ebx, ebx
   627 00000237 31C9                <1>  xor ecx, ecx
   628 00000239 66BB3030            <1>  mov bx, '00'
   629 0000023D 86E0                <1>  xchg ah, al
   630 0000023F 6629D8              <1>  sub ax, bx
   631 00000242 88E5                <1>  mov ch, ah
   632 00000244 C0E403              <1>  shl ah, 3
   633 00000247 D0E5                <1>  shl ch, 1
   634 00000249 00EC                <1>  add ah, ch
   635 0000024B 00E0                <1>  add al, ah
   636 0000024D 30E4                <1>  xor ah,ah
   637 0000024F 59                  <1>  pop ecx
   638 00000250 5B                  <1>  pop ebx
   639 00000251 66BB0100                        mov bx, 1
   640 00000255 6629D8                          sub ax, bx
   641                                          convert_back
   642 00000258 53                  <1>  push ebx
   643 00000259 51                  <1>  push ecx
   644                              <1> 
   645 0000025A B30A                <1>  mov bl, 10
   646 0000025C F6F3                <1>  div bl
   647 0000025E 80C430              <1>  add ah, 48
   648 00000261 0430                <1>  add al, 48
   649                              <1> 
   650 00000263 59                  <1>  pop ecx
   651 00000264 5B                  <1>  pop ebx
   652 00000265 E8D9010000                      call pyshift
   653 0000026A 66A3[21000000]                  mov [python + 2], ax
   654                                  
   655 00000270 E939FEFFFF                      jmp time2sleep
   656                                  
   657                                  moveDown:             
   658                                  	;down movement
   659 00000275 66A1[21000000]                  mov ax, [python + 2]
   660                                          convert
   661 0000027B 53                  <1>  push ebx
   662 0000027C 51                  <1>  push ecx
   663 0000027D 31DB                <1>  xor ebx, ebx
   664 0000027F 31C9                <1>  xor ecx, ecx
   665 00000281 66BB3030            <1>  mov bx, '00'
   666 00000285 86E0                <1>  xchg ah, al
   667 00000287 6629D8              <1>  sub ax, bx
   668 0000028A 88E5                <1>  mov ch, ah
   669 0000028C C0E403              <1>  shl ah, 3
   670 0000028F D0E5                <1>  shl ch, 1
   671 00000291 00EC                <1>  add ah, ch
   672 00000293 00E0                <1>  add al, ah
   673 00000295 30E4                <1>  xor ah,ah
   674 00000297 59                  <1>  pop ecx
   675 00000298 5B                  <1>  pop ebx
   676 00000299 66BB0100                        mov bx, 1
   677 0000029D 6601D8                          add ax, bx
   678                                          convert_back
   679 000002A0 53                  <1>  push ebx
   680 000002A1 51                  <1>  push ecx
   681                              <1> 
   682 000002A2 B30A                <1>  mov bl, 10
   683 000002A4 F6F3                <1>  div bl
   684 000002A6 80C430              <1>  add ah, 48
   685 000002A9 0430                <1>  add al, 48
   686                              <1> 
   687 000002AB 59                  <1>  pop ecx
   688 000002AC 5B                  <1>  pop ebx
   689 000002AD E891010000                      call pyshift
   690 000002B2 66A3[21000000]                  mov [python + 2], ax
   691                                  
   692 000002B8 E9F1FDFFFF                      jmp time2sleep
   693                                  
   694                                  _getCode:
   695                                          Open 0  ; readonly
   696                              <1> 
   697 000002BD 60                  <1>  pusha
   698 000002BE B805000000          <1>  mov eax,5
   699 000002C3 BB[10000000]        <1>  mov ebx,fileName
   700 000002C8 B900000000          <1>  mov ecx,%1
   701 000002CD CD80                <1>  int 80h
   702 000002CF A3[1B000000]        <1>  mov [fileDescriptor],eax
   703 000002D4 61                  <1>  popa
   704                              <1> 
   705                                          Read        fileDescriptor, inputBuffer, 2
   706 000002D5 60                  <1>  pusha
   707 000002D6 B803000000          <1>  mov eax,3
   708 000002DB 8B1D[1B000000]      <1>  mov ebx,[%1]
   709 000002E1 B9[00000000]        <1>  mov ecx,%2
   710 000002E6 BA02000000          <1>  mov edx,%3
   711 000002EB CD80                <1>  int 80h
   712 000002ED 61                  <1>  popa
   713                                          Close
   714 000002EE 60                  <1>  pusha
   715 000002EF B806000000          <1>  mov eax,6
   716 000002F4 8B1D[1B000000]      <1>  mov ebx,[fileDescriptor]
   717 000002FA CD80                <1>  int 80h
   718 000002FC 61                  <1>  popa
   719 000002FD A0[00000000]                    mov     al, BYTE [inputBuffer]
   720 00000302 C3                              ret
   721                                  
   722                                  ;;; Sleep function
   723                                  _sleep1:
   724 00000303 60                              pusha
   725                                  
   726 00000304 B8A2000000                      mov     eax,162
   727 00000309 BB[08000000]                    mov     ebx,sec
   728 0000030E B900000000                      mov     ecx,0
   729 00000313 CD80                            int     80h
   730 00000315 61                              popa
   731 00000316 C3                              ret
   732                                  
   733                                  ; Normal termination code
   734 00000317 B801000000              mov eax, 1
   735 0000031C BB00000000              mov ebx, 0
   736 00000321 CD80                    int 80h
   737                                  
   738                                  writeToScreen: 
   739 00000323 60                              pusha
   740 00000324 B8[69000000]                    mov eax, screen
   741 00000329 B9E9070000                      mov ecx, screenSize
   742                                  topscreen:
   743                                  	;top screen
   744 0000032E E886000000                      call printsegmen
   745 00000333 66833D[56080000]01              cmp word [segmen], 1
   746 0000033B 7417                            je middlescreen
   747                                          prt eax, 1
   748 0000033D 60                  <1>  pusha
   749 0000033E 89C1                <1>  mov ecx, %1
   750 00000340 BA01000000          <1>  mov edx, %2
   751 00000345 B804000000          <1>  mov eax, 4
   752 0000034A BB01000000          <1>  mov ebx, 1
   753 0000034F CD80                <1>  int 80h
   754 00000351 61                  <1>  popa
   755 00000352 EB22                            jmp middlescreen2
   756                                  middlescreen:
   757                                  	;middle screen
   758 00000354 80382A                          cmp byte [eax], 42d
   759 00000357 7407                            je terminator1
   760 00000359 803857                          cmp byte [eax], 87d
   761 0000035C 740D                            je terminator2
   762 0000035E EB16                            jmp middlescreen2
   763                                  terminator1:
   764 00000360 66C705[58080000]01-             mov word [termination], 1
   765 00000368 00                 
   766 00000369 EB0B                            jmp middlescreen2
   767                                  terminator2:
   768 0000036B 66C705[58080000]02-             mov word [termination], 2
   769 00000373 00                 
   770 00000374 EB00                            jmp middlescreen2
   771                                  middlescreen2:
   772                                  	;middle screen
   773 00000376 66C705[56080000]00-             mov word [segmen], 0
   774 0000037E 00                 
   775 0000037F 83C001                          add eax, 1
   776 00000382 66FF05[52080000]                inc word [col]
   777 00000389 66833D[52080000]51              cmp word [col], 81
   778 00000391 7510                            jne bottomscreen
   779 00000393 66FF05[54080000]                inc word [row]
   780 0000039A 66C705[52080000]00-             mov word [col], 0
   781 000003A2 00                 
   782                                  
   783                                  bottomscreen: 
   784                                  	;bottom screen
   785 000003A3 E289                            loop topscreen
   786 000003A5 61                              popa
   787 000003A6 66C705[52080000]01-             mov word [col], 1
   788 000003AE 00                 
   789 000003AF 66C705[54080000]01-             mov word [row], 1
   790 000003B7 00                 
   791 000003B8 C3                              ret
   792                                  
   793                                  printsegmen: 
   794                                  	;print segmen
   795 000003B9 60                              pusha
   796 000003BA B908000000                      mov ecx, 8      
   797 000003BF BB[1F000000]                    mov ebx, python
   798                                  
   799                                  topsegmen:
   800                                  	;top segmen
   801 000003C4 668B4302                        mov ax, [ebx + 2]
   802                                          convert
   803 000003C8 53                  <1>  push ebx
   804 000003C9 51                  <1>  push ecx
   805 000003CA 31DB                <1>  xor ebx, ebx
   806 000003CC 31C9                <1>  xor ecx, ecx
   807 000003CE 66BB3030            <1>  mov bx, '00'
   808 000003D2 86E0                <1>  xchg ah, al
   809 000003D4 6629D8              <1>  sub ax, bx
   810 000003D7 88E5                <1>  mov ch, ah
   811 000003D9 C0E403              <1>  shl ah, 3
   812 000003DC D0E5                <1>  shl ch, 1
   813 000003DE 00EC                <1>  add ah, ch
   814 000003E0 00E0                <1>  add al, ah
   815 000003E2 30E4                <1>  xor ah,ah
   816 000003E4 59                  <1>  pop ecx
   817 000003E5 5B                  <1>  pop ebx
   818 000003E6 663B05[54080000]                cmp ax, [row]
   819 000003ED 754D                            jne botsegmen
   820 000003EF 668B4305                        mov ax, [ebx + 5]
   821                                          convert
   822 000003F3 53                  <1>  push ebx
   823 000003F4 51                  <1>  push ecx
   824 000003F5 31DB                <1>  xor ebx, ebx
   825 000003F7 31C9                <1>  xor ecx, ecx
   826 000003F9 66BB3030            <1>  mov bx, '00'
   827 000003FD 86E0                <1>  xchg ah, al
   828 000003FF 6629D8              <1>  sub ax, bx
   829 00000402 88E5                <1>  mov ch, ah
   830 00000404 C0E403              <1>  shl ah, 3
   831 00000407 D0E5                <1>  shl ch, 1
   832 00000409 00EC                <1>  add ah, ch
   833 0000040B 00E0                <1>  add al, ah
   834 0000040D 30E4                <1>  xor ah,ah
   835 0000040F 59                  <1>  pop ecx
   836 00000410 5B                  <1>  pop ebx
   837 00000411 663B05[52080000]                cmp ax, [col]
   838 00000418 7522                            jne botsegmen
   839 0000041A 83C308                          add ebx, 8
   840                                          prt ebx, 1
   841 0000041D 60                  <1>  pusha
   842 0000041E 89D9                <1>  mov ecx, %1
   843 00000420 BA01000000          <1>  mov edx, %2
   844 00000425 B804000000          <1>  mov eax, 4
   845 0000042A BB01000000          <1>  mov ebx, 1
   846 0000042F CD80                <1>  int 80h
   847 00000431 61                  <1>  popa
   848 00000432 83EB08                          sub ebx, 8
   849 00000435 66FF05[56080000]                inc word [segmen]
   850                                  
   851                                  botsegmen:
   852                                  	;bottom segmen
   853 0000043C 83C309                          add ebx, 9
   854 0000043F E283                            loop topsegmen
   855 00000441 61                              popa
   856 00000442 C3                              ret
   857                                  
   858                                  pyshift: 
   859                                  	;moves python
   860 00000443 60                              pusha
   861 00000444 B907000000                      mov ecx, 7
   862 00000449 BB[1F000000]                    mov ebx, python
   863 0000044E 83C33F                          add ebx, 63
   864                                  
   865                                  toshift: 
   866                                  	;shifts top
   867 00000451 83EB09                          sub ebx, 9
   868 00000454 668B4302                        mov ax, [ebx + 2]
   869 00000458 668B5305                        mov dx, [ebx + 5]
   870 0000045C 83C309                          add ebx, 9
   871 0000045F 66894302                        mov [ebx + 2], ax
   872 00000463 66895305                        mov [ebx + 5], dx
   873 00000467 83EB09                          sub ebx, 9
   874 0000046A E2E5                            loop toshift
   875 0000046C 61                              popa
   876 0000046D C3                              ret
