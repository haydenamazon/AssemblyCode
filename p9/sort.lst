     1                                  ; Hayden Amazon
     2                                  ; P9
     3                                  ; November 17, 2023
     4                                  ; Etc....
     5                                  
     6                                  %macro prt 2
     7                                      pusha
     8                                      mov eax, 4
     9                                      mov ebx, 1
    10                                      mov ecx, %1
    11                                      mov edx, %2
    12                                      int 80h
    13                                      popa
    14                                  %endmacro
    15                                  ;first macro with two conditions
    16                                  
    17                                  %macro prtArray 2
    18                                      pusha
    19                                      mov edi, %2     ;set edi to numslen
    20                                      xor esi, esi    ;clear esi for use as counter
    21                                      mov ax, [%1]    ;set ax to nums address in memory
    22                                      mov ebx, %1
    23                                      call prtArrayLoop
    24                                      popa
    25                                  %endmacro
    26                                  ;macro to print array
    27                                  
    28                                  ; bubble sort
    29                                  %macro sortArray 2
    30                                          pusha
    31                                          ;;;;
    32                                          mov ecx, %2
    33                                          outer:
    34                                                  mov ebx, 0
    35                                  		;reset ebx
    36                                                  inner:
    37                                                          mov eax, [%1 + ebx * 2]
    38                                                          cmp eax, [%1 + ebx * 2 + 2]
    39                                                          jle noSwap
    40                                                          mov edx, [%1 + ebx * 2]
    41                                                          mov [%1 + ebx * 2], eax
    42                                                          mov [%1 + ebx * 2 + 2], edx
    43                                  		noSwap:
    44                                                          inc ebx
    45                                  			;increment to next element
    46                                                          cmp ebx, ecx 
    47                                  			;looks to see if inner loop is completed
    48                                                          jl inner
    49                                                          dec ecx
    50                                  			;decrement counter
    51                                                          jnz outer
    52                                          popa
    53                                  %endmacro
    54                                  
    55                                  SECTION .data
    56                                  ; define data/variables here.  Think DB, DW, DD, DQ
    57 00000000 D007B80B0000FFFF00-     nums:	dw	 2000, 3000, 0, 65535, 0, 1, 2, 3, 100
    58 00000009 000100020003006400 
    59                                  numslen:	EQU	($-nums) / 2
    60 00000012 E803                    counts DW 1000
    61                                  
    62                                  ; String place holder
    63 00000014 2020202020000A0000-     string:  dw "     ", 10, 0
    64 0000001D 00                 
    65                                  
    66 0000001E 1B5B324A                cls:     db 1bh, '[2J'
    67                                  clsLen:  EQU ($-cls)
    68                                  ;clear
    69                                  
    70                                  ; New Line
    71 00000022 0A                      nl:     db 10
    72                                  nlLen:  EQU  ($-nl)
    73                                  
    74 00000023 2A2A2A2A416D617A6F-     mes1:    db "****Amazon's Array Sorting Program****"
    75 0000002C 6E2773204172726179-
    76 00000035 20536F7274696E6720-
    77 0000003E 50726F6772616D2A2A-
    78 00000047 2A2A               
    79                                  mes1Len: EQU ($-mes1)
    80 00000049 4F726967696E616C20-     mes2:    db "Original Array"
    81 00000052 4172726179         
    82                                  mes2Len: EQU ($-mes2)
    83 00000057 536F72746564204172-     mes3:    db "Sorted Array"
    84 00000060 726179             
    85                                  mes3Len: EQU ($-mes3)
    86                                  
    87                                  SECTION .bss
    88                                  ; define uninitialized data here
    89                                  
    90                                  SECTION .text
    91                                  global _main
    92                                  _main:
    93                                  
    94                                  ; put your code here.
    95                                  prt cls, clsLen       ; clear the screen
    96 00000000 60                  <1>  pusha
    97 00000001 B804000000          <1>  mov eax, 4
    98 00000006 BB01000000          <1>  mov ebx, 1
    99 0000000B B9[1E000000]        <1>  mov ecx, %1
   100 00000010 BA04000000          <1>  mov edx, %2
   101 00000015 CD80                <1>  int 80h
   102 00000017 61                  <1>  popa
   103                                  prt cls, clsLen
   104 00000018 60                  <1>  pusha
   105 00000019 B804000000          <1>  mov eax, 4
   106 0000001E BB01000000          <1>  mov ebx, 1
   107 00000023 B9[1E000000]        <1>  mov ecx, %1
   108 00000028 BA04000000          <1>  mov edx, %2
   109 0000002D CD80                <1>  int 80h
   110 0000002F 61                  <1>  popa
   111                                  prt nl, nlLen         ; print new line
   112 00000030 60                  <1>  pusha
   113 00000031 B804000000          <1>  mov eax, 4
   114 00000036 BB01000000          <1>  mov ebx, 1
   115 0000003B B9[22000000]        <1>  mov ecx, %1
   116 00000040 BA01000000          <1>  mov edx, %2
   117 00000045 CD80                <1>  int 80h
   118 00000047 61                  <1>  popa
   119                                  
   120                                  prt mes1, mes1Len     ; print the title of the program
   121 00000048 60                  <1>  pusha
   122 00000049 B804000000          <1>  mov eax, 4
   123 0000004E BB01000000          <1>  mov ebx, 1
   124 00000053 B9[23000000]        <1>  mov ecx, %1
   125 00000058 BA26000000          <1>  mov edx, %2
   126 0000005D CD80                <1>  int 80h
   127 0000005F 61                  <1>  popa
   128                                  prt nl, nlLen         ; print new line
   129 00000060 60                  <1>  pusha
   130 00000061 B804000000          <1>  mov eax, 4
   131 00000066 BB01000000          <1>  mov ebx, 1
   132 0000006B B9[22000000]        <1>  mov ecx, %1
   133 00000070 BA01000000          <1>  mov edx, %2
   134 00000075 CD80                <1>  int 80h
   135 00000077 61                  <1>  popa
   136                                  
   137                                  prt mes2, mes2Len     ; print the header "Original array"
   138 00000078 60                  <1>  pusha
   139 00000079 B804000000          <1>  mov eax, 4
   140 0000007E BB01000000          <1>  mov ebx, 1
   141 00000083 B9[49000000]        <1>  mov ecx, %1
   142 00000088 BA0E000000          <1>  mov edx, %2
   143 0000008D CD80                <1>  int 80h
   144 0000008F 61                  <1>  popa
   145                                  prt nl, nlLen         ; print new line
   146 00000090 60                  <1>  pusha
   147 00000091 B804000000          <1>  mov eax, 4
   148 00000096 BB01000000          <1>  mov ebx, 1
   149 0000009B B9[22000000]        <1>  mov ecx, %1
   150 000000A0 BA01000000          <1>  mov edx, %2
   151 000000A5 CD80                <1>  int 80h
   152 000000A7 61                  <1>  popa
   153                                  
   154                                  ;;;;
   155                                  prtArray nums, numslen          ; prtArray function
   156 000000A8 60                  <1>  pusha
   157 000000A9 BF09000000          <1>  mov edi, %2
   158 000000AE 31F6                <1>  xor esi, esi
   159 000000B0 66A1[00000000]      <1>  mov ax, [%1]
   160 000000B6 BB[00000000]        <1>  mov ebx, %1
   161 000000BB E876000000          <1>  call prtArrayLoop
   162 000000C0 61                  <1>  popa
   163                                  sortArray nums, numslen
   164 000000C1 60                  <1>  pusha
   165                              <1> 
   166 000000C2 B909000000          <1>  mov ecx, %2
   167                              <1>  outer:
   168 000000C7 BB00000000          <1>  mov ebx, 0
   169                              <1> 
   170                              <1>  inner:
   171 000000CC 8B841B[00000000]    <1>  mov eax, [%1 + ebx * 2]
   172 000000D3 3B841B[02000000]    <1>  cmp eax, [%1 + ebx * 2 + 2]
   173 000000DA 7E15                <1>  jle noSwap
   174 000000DC 8B941B[00000000]    <1>  mov edx, [%1 + ebx * 2]
   175 000000E3 89841B[00000000]    <1>  mov [%1 + ebx * 2], eax
   176 000000EA 89941B[02000000]    <1>  mov [%1 + ebx * 2 + 2], edx
   177                              <1>  noSwap:
   178 000000F1 43                  <1>  inc ebx
   179                              <1> 
   180 000000F2 39CB                <1>  cmp ebx, ecx
   181                              <1> 
   182 000000F4 7CD6                <1>  jl inner
   183 000000F6 49                  <1>  dec ecx
   184                              <1> 
   185 000000F7 75CE                <1>  jnz outer
   186 000000F9 61                  <1>  popa
   187                                  
   188                                  prt mes3, mes3Len     ; print the header "Sorted array"
   189 000000FA 60                  <1>  pusha
   190 000000FB B804000000          <1>  mov eax, 4
   191 00000100 BB01000000          <1>  mov ebx, 1
   192 00000105 B9[57000000]        <1>  mov ecx, %1
   193 0000010A BA0C000000          <1>  mov edx, %2
   194 0000010F CD80                <1>  int 80h
   195 00000111 61                  <1>  popa
   196                                  prt nl, nlLen         ; print new line
   197 00000112 60                  <1>  pusha
   198 00000113 B804000000          <1>  mov eax, 4
   199 00000118 BB01000000          <1>  mov ebx, 1
   200 0000011D B9[22000000]        <1>  mov ecx, %1
   201 00000122 BA01000000          <1>  mov edx, %2
   202 00000127 CD80                <1>  int 80h
   203 00000129 61                  <1>  popa
   204                                  
   205                                  lastBreak:
   206                                  ; Normal termination code
   207 0000012A B801000000              mov eax, 1
   208 0000012F BB00000000              mov ebx, 0
   209 00000134 CD80                    int 80h
   210                                  
   211                                  prtArrayLoop:
   212 00000136 39FE                        cmp esi, edi            ;check if out of bounds
   213 00000138 7D2F                        jge exitLoop            ;if not OOB, continue
   214                                  
   215 0000013A 57                          push edi              
   216 0000013B 53                          push ebx
   217                                  
   218 0000013C BF[14000000]                mov edi, string         ;set edi to string address
   219 00000141 E824000000                  call intToStr           ;call to conversion function
   220                                      prt string, 14
   221 00000146 60                  <1>  pusha
   222 00000147 B804000000          <1>  mov eax, 4
   223 0000014C BB01000000          <1>  mov ebx, 1
   224 00000151 B9[14000000]        <1>  mov ecx, %1
   225 00000156 BA0E000000          <1>  mov edx, %2
   226 0000015B CD80                <1>  int 80h
   227 0000015D 61                  <1>  popa
   228                                  
   229 0000015E 5B                          pop ebx
   230 0000015F 5F                          pop edi                 ;restore counter
   231                                  
   232 00000160 83C602                      add esi, 2              ;increment counter
   233 00000163 668B041E                    mov ax, WORD[esi + ebx]
   234                                  DEBUG:
   235 00000167 EBCD                        jmp prtArrayLoop
   236                                  
   237                                      exitLoop:
   238 00000169 C3                      ret
   239                                  
   240                                  
   241                                  
   242                                  intToStr:
   243 0000016A 51                              push ecx
   244 0000016B 53                              push ebx
   245                                          ;;;;
   246 0000016C B30A                            mov bl, 10
   247 0000016E 83C704                          add edi, 4
   248                                  	;;;;
   249                                          convert:
   250 00000171 31D2                                    xor edx, edx
   251                                  		;zero out edx
   252                                                  ;shr bl
   253 00000173 F6F3                    		div bl
   254 00000175 80C430                                  add ah, '0'
   255 00000178 8827                                    mov [edi], ah
   256 0000017A 4F                                      dec edi        
   257 0000017B 30E4                                    xor ah, ah
   258                                  		;zer out ah
   259 0000017D 6683F800                                cmp ax, 0
   260                                  		;checks if quotient is zero
   261 00000181 75EE                                    jne convert
   262                                          ;;;;
   263 00000183 59                              pop ecx
   264 00000184 5B                              pop ebx
   265 00000185 C3                      ret
   266                                  
